library(data.table)
library(monocle)
library(DropletUtils)
library(DESeq2)
library(irlba)
library(FNN)
setwd("~/Documents/EMT_paper_revision/TCGA_analysis/CorrectDataset/ScalingForPurity/01_Reconstruction_EMT_bulk/")
source('functions_plot_pseudospace.R')
folder_analysis<-getwd()
current_dir<-getwd()
input_dir<-paste(current_dir,"/data",sep="")
output_dir<-paste(current_dir,"/output_dir",sep="")
norm_expr_data<-function(FM,pseudo_expr){
FM2 <- FM/estimateSizeFactorsForMatrix(FM)
if (is.null(pseudo_expr))
pseudo_expr <- 1
FM2 <- FM2 + pseudo_expr
FM2 <- log2(FM2)
return(FM2)
}
setwd(input_dir)
cds.list <- readRDS("pseudospace_processed_trajectories_cds.list.rds")
mock <- Biobase::exprs(cds.list[["Mock"]])
tgfb <- Biobase::exprs(cds.list[["TGFB"]])
#This is the information about reported genes
mock_genes<-cds.list[["Mock"]]@featureData@data[,c(1,2)]
tgfb_genes<-cds.list[["TGFB"]]@featureData@data[,c(1,2)]
#This is the expression data
mock2<-data.frame(genes=mock_genes,as.matrix(mock))
tgfb2<-data.frame(genes=tgfb_genes,as.matrix(tgfb))
#This is the peseudotime data
mock_pData <- pData(cds.list[["Mock"]])[,c("cell","sample","Pseudotime")]
tgfb_pData <- pData(cds.list[["TGFB"]])[,c("cell","sample","Pseudotime")]
mock_norm <- norm_expr_data(mock2[,-c(1:2)],1)
mock_norm2 <- data.frame(mock2[,c(1:2)],mock_norm)
tgfb_norm <- norm_expr_data(tgfb2[,-c(1:2)],1)
tgfb_norm2 <- data.frame(tgfb2[,c(1:2)],tgfb_norm)
mock_norm2_gene<-t(mock_norm2[mock_norm2[,2]=='FN1',-c(1:2)])
mock_norm2_gene<-data.frame(sample=rownames(mock_norm2_gene),mock_norm2_gene)
mock_norm2_gene[,1]<-gsub(mock_norm2_gene[,1],pattern='\\.',replacement='-')
mock_norm2_gene<-merge(mock_norm2_gene,mock_pData,by.x='sample',by.y='cell')[,c(2,3,4)]
colnames(mock_norm2_gene)[1]<-'value'
colnames(mock_norm2_gene)[2]<-'status'
setwd(output_dir)
png('MOCK_FN1_original_scRNA_seq.png', height=6,width=8,units='in',res=300)
ggplot(mock_norm2_gene,aes(x=Pseudotime,y=value,color=status,shape=status))+geom_point(aes(alpha=0.9))+scale_color_manual(values=c('#E69F00','#56B4E9'))+geom_smooth(method='loess',fullrange=T,aes(linetype=status),color='black')
dev.off()
tgfb_norm2_gene<-t(tgfb_norm2[tgfb_norm2[,2]=='FN1',-c(1:2)])
tgfb_norm2_gene<-data.frame(sample=rownames(tgfb_norm2_gene),tgfb_norm2_gene)
tgfb_norm2_gene[,1]<-gsub(tgfb_norm2_gene[,1],pattern='\\.',replacement='-')
tgfb_norm2_gene<-merge(tgfb_norm2_gene,tgfb_pData,by.x='sample',by.y='cell')[,c(2,3,4)]
colnames(tgfb_norm2_gene)[1]<-'value'
colnames(tgfb_norm2_gene)[2]<-'status'
png('TGFB_FN1_original_scRNA_seq.png', height=6,width=8,units='in',res=300)
ggplot(tgfb_norm2_gene,aes(x=Pseudotime,y=value,color=status,shape=status))+geom_point(aes(alpha=0.9))+scale_color_manual(values=c('#E69F00','#56B4E9'))+geom_smooth(method='loess',fullrange=T,aes(linetype=status),color='black')
dev.off()
setwd(input_dir)
save(mock_pData, file = "mock_pData.RData")
save(tgfb_pData, file = "tgfb_pData.RData")
save(mock_norm2, file = "mock_norm2.RData")
save(tgfb_norm2, file = "tgfb_norm2.RData")
setwd("~/Documents/EMT_paper_revision/TCGA_analysis/CorrectDataset/ScalingForPurity/01_Reconstruction_EMT_bulk/output_dir/")
new.pseudotime <- read.table("KNN_projection_TCGA_to_MCF10A_mock_treated_cells_no_correction_primarytumor.txt", header = TRUE, sep = "\t")
new.pseudotime <- new.pseudotime[,colnames(new.pseudotime) %in% c("patients","pseudospace")]
colnames(new.pseudotime) <- c("Patients","NewPseudotime")
setwd("~/Documents/EMT_paper_revision/TCGA_analysis/NoScaleResults")
old.pseudotime <- read.table("HMM_results_nstates_3.txt", header = TRUE,sep = "\t")
old.pseudotime <- old.pseudotime[,colnames(old.pseudotime) %in% c("samples","pseudospace")]
colnames(old.pseudotime) <- c("Patients","OldPseudotime")
merged.data <- merge(new.pseudotime, old.pseudotime,
by.x = "Patients", by.y = "Patients")
#Plot:
setwd("~/Documents/EMT_paper_revision/TCGA_analysis/CorrectDataset/ScalingForPurity/01_Reconstruction_EMT_bulk/output_dir/")
library(ggpubr)
pdf("Old_vs_New_Pseudotime.pdf", width = 7, height = 7)
p <- ggscatter(merged.data, x = "OldPseudotime", y = "NewPseudotime",add = "reg.line", add.params = list(color = "blue", fill = "lightgray"), cor.coef = TRUE,
conf.int = TRUE,cor.coeff.args = list(method = "pearson", label.sep = "\n"))
print(p + labs(x = "Pseudotime reported by Guidantonio", y = "Pseudotime with purity scaling"))
dev.off()
