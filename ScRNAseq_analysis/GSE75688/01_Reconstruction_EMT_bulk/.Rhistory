library(data.table)
library(monocle)
library(DropletUtils)
library(DESeq2)
library(irlba)
library(FNN)
library(biomaRt)
library(plyr)
library(dplyr)
setwd("~/Documents/EMT_paper_revision/TCGA_PurityScaledAnalysis/MCF10_Cook_averaged/ScRNAseqAnalysis/GSE75688/01_Reconstruction_EMT_bulk/Cook/")
source('functions_plot_pseudospace.R')
folder_analysis<-getwd()
current_dir<-getwd()
input_dir<-paste(current_dir,"/data",sep="")
output_dir<-paste(current_dir,"/output_dir",sep="")
norm_expr_data<-function(FM,pseudo_expr){
FM2 <- FM/estimateSizeFactorsForMatrix(FM)
if (is.null(pseudo_expr))
pseudo_expr <- 1
FM2 <- FM2 + pseudo_expr
FM2 <- log2(FM2)
return(FM2)
}
setwd("~/Documents/EMT_paper_revision/TCGA_PurityScaledAnalysis/Data")
cds.list <- readRDS("pseudospace_processed_trajectories_cds.list.rds")
mock <- Biobase::exprs(cds.list[["Mock"]])
tgfb <- Biobase::exprs(cds.list[["TGFB"]])
#This is the information about reported genes
mock_genes<-cds.list[["Mock"]]@featureData@data[,c(1,2)]
tgfb_genes<-cds.list[["TGFB"]]@featureData@data[,c(1,2)]
#This is the expression data
mock2<-data.frame(genes=mock_genes,as.matrix(mock))
tgfb2<-data.frame(genes=tgfb_genes,as.matrix(tgfb))
#This is the peseudotime data
mock_pData <- pData(cds.list[["Mock"]])[,c("cell","sample","Pseudotime")]
tgfb_pData <- pData(cds.list[["TGFB"]])[,c("cell","sample","Pseudotime")]
mock_pData$Pseudotime<-(mock_pData$Pseudotime/max(mock_pData$Pseudotime))*100
mock_pData$Pseudotime <- 100 - mock_pData$Pseudotime
tgfb_pData$Pseudotime<-(tgfb_pData$Pseudotime/max(tgfb_pData$Pseudotime))*100
tgfb_pData$Pseudotime <- 100 - tgfb_pData$Pseudotime
mock_norm <- norm_expr_data(mock2[,-c(1:2)],1)
mock_norm2 <- data.frame(mock2[,c(1:2)],mock_norm)
tgfb_norm <- norm_expr_data(tgfb2[,-c(1:2)],1)
tgfb_norm2 <- data.frame(tgfb2[,c(1:2)],tgfb_norm)
mock_norm2_gene<-t(mock_norm2[mock_norm2[,2]=='FN1',-c(1:2)])
mock_norm2_gene<-data.frame(sample=rownames(mock_norm2_gene),mock_norm2_gene)
mock_norm2_gene[,1]<-gsub(mock_norm2_gene[,1],pattern='\\.',replacement='-')
mock_norm2_gene<-merge(mock_norm2_gene,mock_pData,by.x='sample',by.y='cell')[,c(2,3,4)]
colnames(mock_norm2_gene)[1]<-'value'
colnames(mock_norm2_gene)[2]<-'status'
setwd(output_dir)
png('MOCK_FN1_original_scRNA_seq.png', height=6,width=8,units='in',res=300)
ggplot(mock_norm2_gene,aes(x=Pseudotime,y=value,color=status,shape=status))+geom_point(aes(alpha=0.9))+scale_color_manual(values=c('#E69F00','#56B4E9'))+geom_smooth(method='loess',fullrange=T,aes(linetype=status),color='black')
dev.off()
tgfb_norm2_gene<-t(tgfb_norm2[tgfb_norm2[,2]=='FN1',-c(1:2)])
tgfb_norm2_gene<-data.frame(sample=rownames(tgfb_norm2_gene),tgfb_norm2_gene)
tgfb_norm2_gene[,1]<-gsub(tgfb_norm2_gene[,1],pattern='\\.',replacement='-')
tgfb_norm2_gene<-merge(tgfb_norm2_gene,tgfb_pData,by.x='sample',by.y='cell')[,c(2,3,4)]
colnames(tgfb_norm2_gene)[1]<-'value'
colnames(tgfb_norm2_gene)[2]<-'status'
png('TGFB_FN1_original_scRNA_seq.png', height=6,width=8,units='in',res=300)
ggplot(tgfb_norm2_gene,aes(x=Pseudotime,y=value,color=status,shape=status))+geom_point(aes(alpha=0.9))+scale_color_manual(values=c('#E69F00','#56B4E9'))+geom_smooth(method='loess',fullrange=T,aes(linetype=status),color='black')
dev.off()
setwd(input_dir)
save(mock_pData, file = "mock_pData.RData")
save(tgfb_pData, file = "tgfb_pData.RData")
save(mock_norm2, file = "mock_norm2.RData")
save(tgfb_norm2, file = "tgfb_norm2.RData")
load("mock_norm2.RData")
#Load scRNAseq dataset:
load('TPM_data.RData')
tcga<-TPM.data
tcga[,-1]<-log(tcga[,-1]+1,2) #Data has to be log normalised
colnames(tcga)[1] <- "gene_symbol"
tcga[1:10,1:10]
tcga_samples <- colnames(tcga)
tcga_samples <- tcga_samples[-1]
####Pseudotime mid confidence
#Load MCF10 pseudotime estimates
setwd("~/Documents/EMT_paper_revision/TCGA_PurityScaledAnalysis/MCF10_Cook_averaged/ScRNAseqAnalysis/GSE75688/01_Reconstruction_EMT_bulk/MCF10/output_dir/")
pseudotime <- read.table("proj_pseudospace_withzeros.txt", header = TRUE,sep = "\t")
pseudotime$mock <- pseudotime$mock + pseudotime$tgfb
conditions <- c("A549_TGFB1","A549_TNF","DU145_TGFB1","DU145_TNF",
"MCF7_TGFB1","MCF7_TNF","OVCA420_TGFB1","OVCA420_TNF")
for (i in conditions) {
print(i)
setwd("~/Documents/EMT_paper_revision/TCGA_PurityScaledAnalysis/MCF10_Cook_averaged/ScRNAseqAnalysis/GSE75688/01_Reconstruction_EMT_bulk/Cook/output_dir/")
pseudotime_add <- read.table(paste("KNN_projection_TCGA_to_",i,"_treated_cells_no_correction_primarytumor.txt",sep = ''), header = TRUE,sep = "\t")
print(all(pseudotime$patients == pseudotime_add$patients))
pseudotime$mock <- pseudotime$mock + pseudotime_add$pseudospace
}
summary(pseudotime$mock)
pseudotime$mock <- pseudotime$mock / 10
setwd("~/Documents/EMT_paper_revision/TCGA_PurityScaledAnalysis/MCF10_Cook_averaged/ScRNAseqAnalysis/GSE75688/01_Reconstruction_EMT_bulk/")
write.table(pseudotime, "AveragedPseudotime_midconf_withzeros.txt",row.names=F,quote=F,sep="\t")
########################
#Extra analysis
setwd("~/Documents/EMT_paper_revision/TCGA_PurityScaledAnalysis/MCF10_Cook_averaged/ScRNAseqAnalysis/GSE75688/01_Reconstruction_EMT_bulk/")
pseudospace_input<-read.delim(file="AveragedPseudotime_midconf_withzeros.txt")
pseudospace_input$Patient <- sapply(pseudospace_input$patients, function(x)
strsplit(x,"_")[[1]][1])
pseudospace_input$SampleType <- sapply(pseudospace_input$patients, function(x)
strsplit(x,"_")[[1]][2])
table(pseudospace_input$Patient)
table(pseudospace_input$SampleType)
pseudospace_input$Stage <- sapply(pseudospace_input$Patient, function(x)
ifelse(x %in% c("BC03LN","BC07LN"),"Metastases","Primary"))
pseudospace_input$patients2 <- pseudospace_input$patients
pseudospace_input_sort<-pseudospace_input[order(pseudospace_input$mock,decreasing=F),]
#sc vs bulk
table(pseudospace_input_sort$SampleType)
bulk_patients <- pseudospace_input_sort[pseudospace_input_sort$SampleType %in% "Pooled",]
bulk_patients <- unique(as.character(bulk_patients$Patient))
mean_sc <- NULL
bulk <- NULL
for (i in bulk_patients) {
print(i)
test <- pseudospace_input_sort[pseudospace_input_sort$Patient %in% i,]
test1 <- test[!(test$SampleType %in% "Pooled"),]
test1 <- mean(test1$mock)
test2 <- test[test$SampleType %in% "Pooled",]
test2 <- mean(test2$mock)
mean_sc <- c(mean_sc, test1)
bulk <- c(bulk, test2)
}
summary <- data.frame(mean_sc, bulk)
p <- ggscatter(summary, x = "bulk", y = "mean_sc",add = "reg.line", add.params = list(color = "blue", fill = "lightgray"),
cor.coef = TRUE, alpha = 0.1, size = 2)
p + labs(x = "Bulk sample peseudotime", y = "mean scRNAseq sample pseudotime")
library(ggpubr)
p <- ggscatter(summary, x = "bulk", y = "mean_sc",add = "reg.line", add.params = list(color = "blue", fill = "lightgray"),
cor.coef = TRUE, alpha = 0.1, size = 2)
p + labs(x = "Bulk sample peseudotime", y = "mean scRNAseq sample pseudotime")
library(ggpubr)
pdf("Dataset1_bulk_vs_scRNAseq_pseudotime.pdf", width = 5, height = 5)
p <- ggscatter(summary, x = "bulk", y = "mean_sc",add = "reg.line", add.params = list(color = "blue", fill = "lightgray"),
cor.coef = TRUE, alpha = 0.1, size = 2)
p + labs(x = "Bulk sample peseudotime", y = "mean scRNAseq sample pseudotime")
dev.off()
pdf("GSE75688_bulk_vs_scRNAseq_pseudotime.pdf", width = 5, height = 5)
p <- ggscatter(summary, x = "bulk", y = "mean_sc",add = "reg.line", add.params = list(color = "blue", fill = "lightgray"),
cor.coef = TRUE, alpha = 0.1, size = 2)
p + labs(x = "Bulk sample peseudotime", y = "mean scRNAseq sample pseudotime")
dev.off()
