library(data.table)
library(monocle)
library(DropletUtils)
library(DESeq2)
library(irlba)
library(FNN)
setwd("~/Documents/EMT_paper_revision/01_Reconstruction_EMT_bulk")
source('functions_plot_pseudospace.R')
folder_analysis<-getwd()
current_dir<-getwd()
input_dir<-paste(current_dir,"/data",sep="")
output_dir<-paste(current_dir,"/output_dir",sep="")
norm_expr_data<-function(FM,pseudo_expr){
FM2 <- FM/estimateSizeFactorsForMatrix(FM)
if (is.null(pseudo_expr))
pseudo_expr <- 1
FM2 <- FM2 + pseudo_expr
FM2 <- log2(FM2)
return(FM2)
}
setwd(input_dir)
cds.list <- readRDS("pseudospace_processed_trajectories_cds.list.rds")
mock <- Biobase::exprs(cds.list[["Mock"]])
tgfb <- Biobase::exprs(cds.list[["TGFB"]])
#This is the information about reported genes
mock_genes<-cds.list[["Mock"]]@featureData@data[,c(1,2)]
tgfb_genes<-cds.list[["TGFB"]]@featureData@data[,c(1,2)]
#This is the expression data
mock2<-data.frame(genes=mock_genes,as.matrix(mock))
tgfb2<-data.frame(genes=tgfb_genes,as.matrix(tgfb))
#This is the peseudotime data
mock_pData <- pData(cds.list[["Mock"]])[,c("cell","sample","Pseudotime")]
tgfb_pData <- pData(cds.list[["TGFB"]])[,c("cell","sample","Pseudotime")]
#
# Normalization, see the documentaiton of monocle for the type of procedures, and monocle:::normalize_expr_data
#
mock_norm <- norm_expr_data(mock2[,-c(1:2)],1)
mock_norm2 <- data.frame(mock2[,c(1:2)],mock_norm)
tgfb_norm <- norm_expr_data(tgfb2[,-c(1:2)],1)
tgfb_norm2 <- data.frame(tgfb2[,c(1:2)],tgfb_norm)
#
# Check scRNA-seq data for VIM
#
mock_norm2_gene<-t(mock_norm2[mock_norm2[,2]=='FN1',-c(1:2)])
mock_norm2_gene<-data.frame(sample=rownames(mock_norm2_gene),mock_norm2_gene)
mock_norm2_gene[,1]<-gsub(mock_norm2_gene[,1],pattern='\\.',replacement='-')
mock_norm2_gene<-merge(mock_norm2_gene,mock_pData,by.x='sample',by.y='cell')[,c(2,3,4)]
colnames(mock_norm2_gene)[1]<-'value'
colnames(mock_norm2_gene)[2]<-'status'
setwd(output_dir)
png('MOCK_FN1_original_scRNA_seq.png', height=6,width=8,units='in',res=300)
ggplot(mock_norm2_gene,aes(x=Pseudotime,y=value,color=status,shape=status))+geom_point(aes(alpha=0.9))+scale_color_manual(values=c('#E69F00','#56B4E9'))+geom_smooth(method='loess',fullrange=T,aes(linetype=status),color='black')
dev.off()
tgfb_norm2_gene<-t(tgfb_norm2[tgfb_norm2[,2]=='FN1',-c(1:2)])
tgfb_norm2_gene<-data.frame(sample=rownames(tgfb_norm2_gene),tgfb_norm2_gene)
tgfb_norm2_gene[,1]<-gsub(tgfb_norm2_gene[,1],pattern='\\.',replacement='-')
tgfb_norm2_gene<-merge(tgfb_norm2_gene,tgfb_pData,by.x='sample',by.y='cell')[,c(2,3,4)]
colnames(tgfb_norm2_gene)[1]<-'value'
colnames(tgfb_norm2_gene)[2]<-'status'
png('TGFB_FN1_original_scRNA_seq.png', height=6,width=8,units='in',res=300)
ggplot(tgfb_norm2_gene,aes(x=Pseudotime,y=value,color=status,shape=status))+geom_point(aes(alpha=0.9))+scale_color_manual(values=c('#E69F00','#56B4E9'))+geom_smooth(method='loess',fullrange=T,aes(linetype=status),color='black')
dev.off()
#
# upload signatures
#
#
# upload TCGA
#
setwd("~/Documents/EMT_paper_revision/Data")
load('TPM_data.RData')
tcga<-TPM.data
tcga[,-1]<-log(tcga[,-1]+1,2) #Data has to be log normalised
colnames(tcga)[1] <- "gene_symbol"
#Merge the datasets
input_mock<-merge(tcga,mock_norm2[,-1],by.x='gene_symbol',by.y='genes.gene_short_name')
input_tgfb<-merge(tcga,tgfb_norm2[,-1],by.x='gene_symbol',by.y='genes.gene_short_name')
#
# Combat Correction
#
library(sva)
batch<-factor(c(rep(1,ncol(tcga[,-1])),rep(2,ncol(mock_norm2[,-c(1:2)]))))
combat_mock = ComBat(dat=as.matrix(input_mock[,-1]), batch=batch)
combat_mock2<-data.frame(genes=input_mock[,1],combat_mock)
combat_mock2[,1]<-as.character(combat_mock2[,1])
combat_mock2[combat_mock2<0]<-0
batch<-factor(c(rep(1,ncol(tcga[,-1])),rep(2,ncol(tgfb_norm2[,-c(1:2)]))))
combat_tgfb = ComBat(dat=as.matrix(input_tgfb[,-1]), batch=batch)
combat_tgfb2<-data.frame(genes=input_tgfb[,1],combat_tgfb)
combat_tgfb2[,1]<-as.character(combat_tgfb2[,1])
combat_tgfb2[combat_tgfb2<0]<-0
#
# Filter samples with low variance
#
vardata<-apply(combat_mock2[,-1],1,var)
combat_mock2$vardata<-vardata
combat_mock2<-combat_mock2[order(combat_mock2$vardata,decreasing=T),]
combat_mock_filter<- combat_mock2[1:round((nrow(combat_mock2)*30)/100),-ncol(combat_mock2)]
vardata<-apply(combat_tgfb2[,-1],1,var)
combat_tgfb2$vardata<-vardata
combat_tgfb2<-combat_tgfb2[order(combat_tgfb2$vardata,decreasing=T),]
combat_tgfb2_filter<- combat_tgfb2[1:round((nrow(combat_tgfb2)*30)/100),-ncol(combat_tgfb2)]
##Load the data
setwd("~/Documents/Dormancy_TME_project_data/scRNAseq/Qian_2020/Colorectal/")
load("expr_data.RData")
load("QS_all_cell.RData")
table(merged.data$CellType)
merged.data <- merged.data[merged.data$CellType %in% "Cancer",]
expr.data <- expr.data[,colnames(expr.data) %in% merged.data$Cell]
dim(expr.data)
##Reorganise the datafame:
X <- rownames(expr.data)
expr.data <- data.frame(expr.data)
expr.data <- cbind(X, expr.data)
View(merged.data)
#Load data:
setwd("~/Documents/Dormancy_TME_project_data/scRNAseq/Qian_2020/Colorectal/")
load("expr_data.RData")
#Load annotation:
load("QS_all_cell.RData")
all(colnames(expr.data) == merged.data$Cell)
#Load EMT annotation
setwd("~/Documents/EMT_paper_revision/Qian_Colorectal/01_Reconstruction_EMT_bulk /output_dir/")
pseudotime <- read.table("proj_pseudospace.txt", header = TRUE, sep = "\t")
#Add quiescence score annotation:
table(merged.data$CellType)
B_cell <- merged.data[merged.data$CellType %in% "B_cell",]
B_cell <- as.character(B_cell$Cell)
Enteric_glia <- merged.data[merged.data$CellType %in% "Enteric_glia",]
Enteric_glia <- as.character(Enteric_glia$Cell)
EC <- merged.data[merged.data$CellType %in% "EC",]
EC <- as.character(EC$Cell)
Fibroblast <- merged.data[merged.data$CellType %in% "Fibroblast",]
Fibroblast <- as.character(Fibroblast$Cell)
Mast <- merged.data[merged.data$CellType %in% "Mast_cell",]
Mast <- as.character(Mast$Cell)
Myeloid <- merged.data[merged.data$CellType %in% "Myeloid",]
Myeloid <- as.character(Myeloid$Cell)
T_cell <- merged.data[merged.data$CellType %in% "T_cell",]
T_cell <- as.character(T_cell$Cell)
Epithelial <- merged.data[merged.data$CellType %in% "Epithelial",]
Epithelial <- as.character(Epithelial$Cell)
#Split cancer cells according to pseudotime categories
pseudotime <- pseudotime[order(pseudotime$mock),]
split_pseudotime <- split(pseudotime, rep(1:3, length.out = nrow(pseudotime), each = ceiling(nrow(pseudotime)/3)))
pseudotime_low <- split_pseudotime[[1]]
pseudotime_mid <- split_pseudotime[[2]]
pseudotime_high <- split_pseudotime[[3]]
pseudotime_low <- as.character(pseudotime_low$patients)
pseudotime_mid <- as.character(pseudotime_mid$patients)
pseudotime_high <- as.character(pseudotime_high$patients)
merged.data$cell_type <- sapply(merged.data$Cell, function(x)
ifelse(x %in% pseudotime_high,"HighPseudotime_tumour",
ifelse(x %in% B_cell, "B_cell",
ifelse(x %in% Enteric_glia,"Enteric_glia",
ifelse(x %in% EC,"EC",
ifelse(x %in% Fibroblast, "Fibroblast",
ifelse(x %in% Mast, "Mast",
ifelse(x %in% Myeloid, "Myeloid",
ifelse(x %in% T_cell, "T_cell",
ifelse(x %in% pseudotime_low, "LowPseudotime_tumour",
ifelse(x %in% Epithelial, "Epithelial","MidPseudotime_tumour")))))))))))
table(merged.data$cell_type)
#Load data:
setwd("~/Documents/Dormancy_TME_project_data/scRNAseq/Qian_2020/Ovarian/")
load("expr_data.RData")
#Load annotation:
load("QS_all_cell.RData")
all(colnames(expr.data) == merged.data$Cell)
#Load EMT annotation
setwd("~/Documents/EMT_paper_revision/Qian_Ovary/01_Reconstruction_EMT_bulk /output_dir/")
pseudotime <- read.table("proj_pseudospace.txt", header = TRUE, sep = "\t")
#Add quiescence score annotation:
table(merged.data$CellType)
B_cell <- merged.data[merged.data$CellType %in% "B_cell",]
B_cell <- as.character(B_cell$Cell)
EC <- merged.data[merged.data$CellType %in% "EC",]
EC <- as.character(EC$Cell)
Fibroblast <- merged.data[merged.data$CellType %in% "Fibroblast",]
Fibroblast <- as.character(Fibroblast$Cell)
Myeloid <- merged.data[merged.data$CellType %in% "Myeloid",]
Myeloid <- as.character(Myeloid$Cell)
T_cell <- merged.data[merged.data$CellType %in% "T_cell",]
T_cell <- as.character(T_cell$Cell)
#Split cancer cells according to pseudotime categories
pseudotime <- pseudotime[order(pseudotime$mock),]
split_pseudotime <- split(pseudotime, rep(1:3, length.out = nrow(pseudotime), each = ceiling(nrow(pseudotime)/3)))
pseudotime_low <- split_pseudotime[[1]]
pseudotime_mid <- split_pseudotime[[2]]
pseudotime_high <- split_pseudotime[[3]]
pseudotime_low <- as.character(pseudotime_low$patients)
pseudotime_mid <- as.character(pseudotime_mid$patients)
pseudotime_high <- as.character(pseudotime_high$patients)
merged.data$cell_type <- sapply(merged.data$Cell, function(x)
ifelse(x %in% pseudotime_low,"LowPseudotime_tumour",
ifelse(x %in% B_cell, "B_cell",
ifelse(x %in% EC,"EC",
ifelse(x %in% Fibroblast, "Fibroblast",
ifelse(x %in% Myeloid, "Myeloid",
ifelse(x %in% T_cell, "T_cell",
ifelse(x %in% pseudotime_mid, "MidPseudotime_tumour","HighPseudotime_tumour"))))))))
table(merged.data$cell_type)
########################################
#CellphoneDB input - Lung canccer
########################################
#Load data:
setwd("~/Documents/Dormancy_TME_project_data/scRNAseq/Qian_2020/Lung/")
load("expr_data.RData")
#Load annotation:
load("QS_all_cell.RData")
all(colnames(expr.data) == merged.data$Cell)
#Load EMT annotation
setwd("~/Documents/EMT_paper_revision/Qian_Lung/01_Reconstruction_EMT_bulk /output_dir/")
pseudotime <- read.table("proj_pseudospace.txt", header = TRUE, sep = "\t")
#Add quiescence score annotation:
table(merged.data$CellType)
B_cell <- merged.data[merged.data$CellType %in% "B_cell",]
B_cell <- as.character(B_cell$Cell)
EC <- merged.data[merged.data$CellType %in% "EC",]
EC <- as.character(EC$Cell)
Fibroblast <- merged.data[merged.data$CellType %in% "Fibroblast",]
Fibroblast <- as.character(Fibroblast$Cell)
Myeloid <- merged.data[merged.data$CellType %in% "Myeloid",]
Myeloid <- as.character(Myeloid$Cell)
T_cell <- merged.data[merged.data$CellType %in% "T_cell",]
T_cell <- as.character(T_cell$Cell)
Alveolar <- merged.data[merged.data$CellType %in% "Alveolar",]
Alveolar <- as.character(Alveolar$Cell)
Epithelial <- merged.data[merged.data$CellType %in% "Epithelial",]
Epithelial <- as.character(Epithelial$Cell)
Erythroblast <- merged.data[merged.data$CellType %in% "Erythroblast",]
Erythroblast <- as.character(Erythroblast$Cell)
Mast_cell <- merged.data[merged.data$CellType %in% "Mast_cell",]
Mast_cell <- as.character(Mast_cell$Cell)
#Split cancer cells according to pseudotime categories
pseudotime <- pseudotime[order(pseudotime$mock),]
split_pseudotime <- split(pseudotime, rep(1:3, length.out = nrow(pseudotime), each = ceiling(nrow(pseudotime)/3)))
pseudotime_low <- split_pseudotime[[1]]
pseudotime_mid <- split_pseudotime[[2]]
pseudotime_high <- split_pseudotime[[3]]
pseudotime_low <- as.character(pseudotime_low$patients)
pseudotime_mid <- as.character(pseudotime_mid$patients)
pseudotime_high <- as.character(pseudotime_high$patients)
merged.data$cell_type <- sapply(merged.data$Cell, function(x)
ifelse(x %in% pseudotime_low,"LowPseudotime_tumour",
ifelse(x %in% B_cell, "B_cell",
ifelse(x %in% EC,"EC",
ifelse(x %in% Fibroblast, "Fibroblast",
ifelse(x %in% Myeloid, "Myeloid",
ifelse(x %in% T_cell, "T_cell",
ifelse(x %in% pseudotime_mid, "MidPseudotime_tumour",
ifelse(x %in% Alveolar, "Alveolar",
ifelse(x %in% Epithelial, "Epithelial",
ifelse(x %in% Erythroblast, "Erythroblast",
ifelse(x %in% Mast_cell, "Mast_cell","HighPseudotime_tumour"))))))))))))
table(merged.data$cell_type)
########################################
#CellphoneDB input - Breast canccer
########################################
#Load data:
setwd("~/Documents/Dormancy_TME_project_data/scRNAseq/Qian_2020/Breast/")
load("expr_data.RData")
#Load annotation:
load("QS_all_cell.RData")
all(colnames(expr.data) == merged.data$Cell)
#Load EMT annotation
setwd("~/Documents/EMT_paper_revision/Qian_Breast/01_Reconstruction_EMT_bulk /output_dir/")
pseudotime <- read.table("proj_pseudospace.txt", header = TRUE, sep = "\t")
#Add quiescence score annotation:
table(merged.data$CellType)
B_cell <- merged.data[merged.data$CellType %in% "B_cell",]
B_cell <- as.character(B_cell$Cell)
DC <- merged.data[merged.data$CellType %in% "DC",]
DC <- as.character(DC$Cell)
EC <- merged.data[merged.data$CellType %in% "EC",]
EC <- as.character(EC$Cell)
Fibroblast <- merged.data[merged.data$CellType %in% "Fibroblast",]
Fibroblast <- as.character(Fibroblast$Cell)
Mast <- merged.data[merged.data$CellType %in% "Mast",]
Mast <- as.character(Mast$Cell)
Myeloid <- merged.data[merged.data$CellType %in% "Myeloid",]
Myeloid <- as.character(Myeloid$Cell)
T_cell <- merged.data[merged.data$CellType %in% "T_cell",]
T_cell <- as.character(T_cell$Cell)
#Split cancer cells according to pseudotime categories
pseudotime <- pseudotime[order(pseudotime$mock),]
split_pseudotime <- split(pseudotime, rep(1:3, length.out = nrow(pseudotime), each = ceiling(nrow(pseudotime)/3)))
pseudotime_low <- split_pseudotime[[1]]
pseudotime_mid <- split_pseudotime[[2]]
pseudotime_high <- split_pseudotime[[3]]
pseudotime_low <- as.character(pseudotime_low$patients)
pseudotime_mid <- as.character(pseudotime_mid$patients)
pseudotime_high <- as.character(pseudotime_high$patients)
merged.data$cell_type <- sapply(merged.data$Cell, function(x)
ifelse(x %in% pseudotime_low,"LowPseudotime_tumour",
ifelse(x %in% B_cell, "B_cell",
ifelse(x %in% DC,"DC",
ifelse(x %in% EC,"EC",
ifelse(x %in% Fibroblast, "Fibroblast",
ifelse(x %in% Mast, "Mast",
ifelse(x %in% Myeloid, "Myeloid",
ifelse(x %in% T_cell, "T_cell",
ifelse(x %in% pseudotime_mid, "MidPseudotime_tumour","HighPseudotime_tumour"))))))))))
table(merged.data$cell_type)
