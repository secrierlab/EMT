group_by(year, genre) %>%
tally(wt=value) %>%
ungroup %>%
mutate(year=as.Date(sprintf("%d-01-01", year))) -> dat
streamgraph(dat, "genre", "n", "year")
library(dplyr)
library(babynames)
library(streamgraph)
install.packages("babynames")
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n)
library(babynames)
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n)
dat <- babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n)
streamgraph(data,key=type,value=sum,date = t)
data<-rbind(data_1_1,data_2_1)
data$t<-as.numeric(data$t)
streamgraph(data,key=data$type,value=data$sum,date = data$t)
streamgraph(data,key=type,value=sum,date =t)
streamgraph
streamgraph(data,key=type,value=sum,date =t,scale="none")
head(data)
data
streamgraph(data,key=type,value=sum,date = t,scale="noparameters")
install.packages("remotes")
remotes::install_github("davidsjoberg/ggstream")
remotes::install_github("davidsjoberg/ggstream")
divide=function(m,s,md,mn,me,Nd){
d1<-m
d2<-m
a=runif(1,0,1)
#replicate the cell into two daughter cells
if (m$status==0){
#0 is stem cell, 1 is differentiated cell
if (a>s){
k<-c(1,0)
l=sample(0:1,1)
u=k[k!=l]
d1$status=l
d2$status=u
}
}
d1$nd<-d1$nd+rpois(1,md/2) #introduce kd ∼ Pois(md /2) driver mutations
d1$nn<-d1$nn+rpois(1,mn/2) #introduce kn ∼ Pois(mn/2) neutral mutations
d2$nd<-d2$nd+rpois(1,md/2)
d2$nn<-d2$nn+rpois(1,mn/2)
if(d1$nd>=Nd){
if (a<me){
d1$pc<-1/0
}
}
if(d2$nd>=Nd){
if (a<me){
d2$pc<-1/0
}
}
A=rbind(d1,d2)
return(A)
}
#x:variable "e" in original table, decrease of the cell death probability per driver mutation
test<-function(md,mn,me,Nd,Nn,f,x,g0,d0,dd0,s,pc,pmax,tmax){
t=0;
p=1;
md=md;mn=mn;me=me;Nd=Nd;Nn=Nn;f=f;x=x;g0=g0;d0=d0;dd0=dd0;s=s;pc=pc;pmax=pmax;tmax=tmax;
stem_cell<-as.data.frame(matrix(NA,1,5))
colnames(stem_cell)<-c("nd","nn","status","pc","t")
stem_cell[1,1]=as.numeric(0)
stem_cell[1,2]=as.numeric(0)
stem_cell[1,3]=as.numeric(0)
stem_cell[1,4]=Inf
stem_cell[1,5]=t
history_cell<-stem_cell
while ((p<pmax)||(t<tmax)){
print(t);
print(p);
divide_x<-NULL
temporary_store_gen<-stem_cell[-1,];
for (i in 1:nrow(stem_cell)) {
#print(i);
g=(1-p/pc)*g0*f^(stem_cell[i,1]);
d=d0*x^(-(stem_cell[i,1]));
a=runif(1,0,1);
if (stem_cell[i,]$status==1){
d=(dd0)*(x^(-(stem_cell[i,1])))}
if(a<0.5){
if(a<g){
divide_x<-divide(stem_cell[i,],s,md,mn,me,Nd);
}
if((p>1) && (a<d)){
divide_x<-divide_x[-(sample(1:2,1)),];
}
}
else{
if((p>1) && (a<d)){
stem_cell<-stem_cell[-i,]
print(happened)
}
if (a<g){
divide_x<-divide(stem_cell[i,],s,md,mn,me,Nd);
}
}
print(divide_x)
temporary_store_gen<-rbind(temporary_store_gen,divide_x) #*********
row.names(temporary_store_gen)<-NULL;
}
if(nrow(temporary_store_gen)==0){
t<t+1
stem_cell$t<-t
p<-nrow(stem_cell)
history_cell<-history_cell
}
else{
p<-nrow(temporary_store_gen);
t<-t+1;
temporary_store_gen$t<-t
stem_cell<-temporary_store_gen
history_cell<-rbind(history_cell,temporary_store_gen);
#print(history_cell)
}
}
return(list(stem_cell,history_cell,p,t))
#stem cell: the final result of the last division
#history_cell: the result for the whole period
#p: number of cells after the final interation
#t: total generation
}
#test<-function(md,mn,me,Nd,Nn,f,x,*g0,d0,dd0,s,pc,pmax,tmax)
trail1<-test(10,10, 0,3,1000,10, 1, 1, 0,0, 10^(-2) ,1/0, 10,10)
trail2<-test(10,10, 0,3,1000,10, 1,0.7,0,0, 10^(-2) ,1/0, 10,10)
##****generating result t vs. number of mutations.
devtools::install_github("hrbrmstr/streamgraph")
library(streamgraph)
data1<-trail1[[2]]
data2<-trail2[[2]]
data1$key<-"fastcycling"
data2$key<-"highlyquiescent"
a<-length(unique(data1$t))
data_1_1<-as.data.frame(matrix(NA,a,4))
colnames(data_1_1)<-c("nd","nn","sum","t")
data_1_1$t<-unique(data1$t)
for (i in 1:(nrow(data_1_1))) {
data_1_1$nd[i]<-sum(data1[data1$t==(i-1),]$nd);
data_1_1$nn[i]<-sum(data1[data1$t==(i-1),]$nn);
data_1_1$sum[i]<-sum(data1[data1$t==(i-1),]$nn)+sum(data1[data1$t==(i-1),]$nd);
}
data_1_1$type<-"cycling"
b<-length(unique(data2$t))
data_2_1<-as.data.frame(matrix(NA,b,4))
colnames(data_2_1)<-c("nd","nn","sum","t")
data_2_1$t<-unique(data2$t)
for (i in 1:nrow(data_2_1)) {
data_2_1$nd[i]<-sum(data2[data2$t==(i-1),]$nd);
data_2_1$nn[i]<-sum(data2[data2$t==(i-1),]$nn);
data_2_1$sum[i]<-sum(data2[data2$t==(i-1),]$nn)+sum(data2[data2$t==(i-1),]$nd);
}
data_2_1$type<-"quiescent"
library(ggstream)
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
library(ggstream)
library(ggplot)
library(ggstream)
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
library(ggplot2)
library(ggstream)
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
data
streamgraph(data,key=type,value=sum,date = t,scale="noparameters")
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
blockbusters
blockbusters$box_office
range(blockbusters$box_office)
data
range(data$sum)
data_2_1$sum<-data_2_1$sum*-1
data_2_1
data<-rbind(data_1_1,data_2_1)
data$t<-as.numeric(data$t)
str(data)
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_area()
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
data<-rbind(data_1_1,data_2_1)
data$t<-as.numeric(data$t)
streamgraph(data,key=type,value=sum,date = t,scale="noparameters")
#
# GMT: alternative to streamgraph - without htmlwidget support
# reference: https://r-charts.com/evolution/ggstream/
#
remotes::install_github("davidsjoberg/ggstream")
library(ggplot2)
library(ggstream)
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
data<-rbind(data_1_1,data_2_1)
data$t<-as.numeric(data$t)
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
data
data<-rbind(data_1_1,data_2_1)
data
b<-length(unique(data2$t))
data_2_1<-as.data.frame(matrix(NA,b,4))
colnames(data_2_1)<-c("nd","nn","sum","t")
data_2_1$t<-unique(data2$t)
for (i in 1:nrow(data_2_1)) {
data_2_1$nd[i]<-sum(data2[data2$t==(i-1),]$nd);
data_2_1$nn[i]<-sum(data2[data2$t==(i-1),]$nn);
data_2_1$sum[i]<-sum(data2[data2$t==(i-1),]$nn)+sum(data2[data2$t==(i-1),]$nd);
}
data_2_1$type<-"quiescent"
data<-rbind(data_1_1,data_2_1)
data$t<-as.numeric(data$t)
data_2_1
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
data
data2[data2$type%in%"cycling","sum"]<-data2[data2$type%in%"cycling","sum"]*-1
ggplot(data2, aes(x = t, y = sum, fill = type)) +
geom_area()
data2
data<-rbind(data_1_1,data_2_1)
data$t<-as.numeric(data$t)
data2<-data
data2[data2$type%in%"cycling","sum"]<-data2[data2$type%in%"cycling","sum"]*-1
ggplot(data2, aes(x = t, y = sum, fill = type)) +
geom_area()
ggplot(data, aes(x = t, y = sum, fill = type)) +
geom_stream()+
geom_stream_label(aes(label = type))
data2[data2$type%in%"cycling","sum"]<-data2[data2$type%in%"cycling","sum"]*-1
ggplot(data2, aes(x = t, y = sum, fill = type)) +
geom_area()
data2[data2$type%in%"cycling","sum"]<-data2[data2$type%in%"cycling","sum"]*-1
ggplot(data2, aes(x = t, y = sum, fill = type)) +
geom_area()
ggplot(data2, aes(x = t, y = sum, fill = type)) +
geom_area()
ggplot(data2, aes(x = t, y = sum, fill = type)) +
geom_area()+labs(y= "Number of drivers mutations", x = "Number of neutral mutations")
head(data2)
12+9
9+12
datamelt<-melt(data2)
datamelt<-melt(data2)
library(reshape2)
datamelt<-melt(data2)
head(datamelt)
str(data2)
datamelt<-melt(data2[,-"sum"])
datamelt<-melt(data2[,-c("sum")])
datamelt<-melt(data2[,-which(colnames(data2)%in%c("sum"))])
str(datamelt)
head(datamelt)
datamelt<-melt(data2[,-which(colnames(data2)%in%c("sum"))])
head(datamelt)
datamelt<-melt(data2[,-which(colnames(data2)%in%c("sum","type"))])
head(datamelt)
str(data2)
str(data2[,-which(colnames(data2)%in%c("sum","type"))])
head(data2)
data2
melt(data2[,-which(colnames(data2)%in%c("sum","type"))])
datamelt<-melt(data2[,-which(colnames(data2)%in%c("sum"))])
datamelt
head(datamelt)
datamelt<-melt(data2)
head(datamelt)
datamelt<-melt(data2)
datamelt
str(data2)
data2
data2[,-3]
melt(data2[,-3])
melt(data2[,-3])
datamelt<-melt(data22[,-3])
datamelt<-melt(data2[,-3])
tdata<-datamelt[datamelt[,2]%in%"t",]
tdata
datamelt2<-cbind(datamelt,tdata)
dim(datamelt)
datamelt_not<-datamelt[-which(datamelt[,2]%in%"t"),]
datamelt2<-cbind(datamelt_not,tdata)
datamelt2
print(nrow(datamelt_not)==nrow(tdata))
datamelt<-melt(data2[,-3])
# parse the data, becasue also the t column is melted
# get only the rows in which in column 2 there is not string "t"
datamelt_not<-datamelt[-which(datamelt[,2]%in%"t"),]
# get only the rows in which in column 2 there is  string "t"
tdata<-datamelt[datamelt[,2]%in%"t",]
nrow(datamelt_not)
nrow(tdata)
tdata
datamelt
head(datamelt)
str(data2)
datamelt<-melt(data2[,-c(3,4)])
nrow(datamelt)
datamelt<-melt(data2[,-c(3,4)])
datamelt
seq(1:10,4)
rep(1:10,4)
length(rep(1:10,4))
nrow(datamelt)
datamelt
datamelt$t<-rep(1:11,4)
datamelt
data2$t
datamelt$t<-rep(0:10,4)
datamelt
nrow(datamelt)
length(rep(0:10,4))
datamelt<-melt(data2[,-c(3,4)])
# there is not more the column t - lost with melt, i can add manually
datamelt$t<-rep(0:10,4)
head(datamelt)
ggplot(datamelt, aes(x = t, y = value, fill = variable)) +
geom_area()+labs(y= "Number of drivers mutations", x = "Number of neutral mutations")
ggplot(datamelt, aes(x = t, y = value, fill = variable)) +
geom_area()+labs(y= "Number of  mutations", x = "Cells")
head(datamelt)
datamelt[datamelt$variable%in%"nn","value"]<--1*datamelt[datamelt$variable%in%"nn","value"]
ggplot(datamelt, aes(x = t, y = value, fill = variable)) +
geom_area()+labs(y= "Number of  mutations", x = "Cells")
datamelt
datamelt$new_status<-paste(datamelt$type,datamelt$variable,sep="_")
head(datamelt)
ggplot(datamelt, aes(x = t, y = value, fill = new_status)) +
geom_area()+labs(y= "Number of  mutations", x = "Cells")
43.96+18.33
43.96+11.70
40.44+11.70
40.44+111.70
40.44+11.70
40.40+11.70
79=81
79+81
load("/Users/guidantonio/Downloads/SKCM_miRNA_expression.Rdata")
ls()
str(data4)
columns_to_use<-c("miRNA_ID",grep(colnames(data4),pattern="read_count_",value=T))
data5<-data4[,which(colnames(data4)%in%columns_to_use)]
str(data5)
colnames(data5)<-gsub(colnames(data5),pattern="read_count_",replacement="")
str(data5)
zscore<-function(X){(X-mean(X))/sd(x)}
data6<-apply(data5,1,zscore)
columns_to_use<-c("grep(colnames(data4),pattern="read_count_",value=T))
data5<-data4[,which(colnames(data4)%in%columns_to_use)]
colnames(data5)<-gsub(colnames(data5),pattern="read_count_",replacement="")
zscore<-function(X){(X-mean(X))/sd(x)}
data6<-apply(data5,1,zscore)
columns_to_use<-c("grep(colnames(data4),pattern="read_count_",value=T))
columns_to_use<-grep(colnames(data4),pattern="read_count_",value=T)
data5<-data4[,which(colnames(data4)%in%columns_to_use)]
colnames(data5)<-gsub(colnames(data5),pattern="read_count_",replacement="")
str(data5)
zscore<-function(X){(X-mean(X))/sd(x)}
data6<-apply(data5,1,zscore)
zscore<-function(X){(X-mean(X))/sd(X)}
data6<-apply(data5,1,zscore)
str(data6)
str(zscore<-function(X){(X-mean(X))/sd(X)}
data6<-apply(data5,1,zscore)
)
zscore<-function(X){(X-mean(X))/sd(X)}
data6<-apply(data5,1,zscore)
str(data6)
data6<-t(apply(data5,1,zscore))
str(data6)
data7<-cbind(data4[,1],data6)
str(data7)
str(data7[,1]
)
str(data7[,2])
data8<-data.frame(data7)
str(data8)
data8<-as.dat.frame(data7)
data8<-as.data.frame(data7)
str(data8)
data7<-data.frame(data4[,1],data6)
str(data7)
dim(data7)
class(data7)
colnames(data7)<-gsub(colnames(data7),pattern="\\.",replacement="-")
colnames(data7)[1:10]
colnames(data7)[1]<-"miRNAID"
str(data7)
269+179
252/699
105+94
system.time(install.packages(c("mclust","clustvarsel","phenopath","vcd","rootSolve","cluster",
"factoextra","mltest","irlba","FNN","igraph","depmixS4","pheatmap",
"diagram","tidyverse","FactoMineR","dotwhisker","interactions",
"circlize","parallel","FSelector","nnet","gridExtra","reshape2",
"jtools","ggstance","broom.mixed","MASS","ggfortify","lme4","MuMIn",
"biglasso","doParallel","glmnetUtils","ROCR","MLeval","caret","ranger",
"fastshap","plotrix","data.table","VennDiagram","forcats","ggforce","gtools",
"ggpmisc","dplyr","grid","finalfit","knitr","kableExtra","survival","survminer","readxl",
"tidyr","glmnet","reshape","viridis","ggridges","cowplot","plyr","corrplot","data.table",
"rstatix","ggpubr","vcd","RColorBrewer","openxlsx","patchwork","ggplot2"),dependencies=T)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("DropletUtils","DESeq2",
"monocle","TSCAN","slingshot",
"ComplexHeatmap","GSVA","VennDetail",
"biomaRt","depmap","sva","TCGAbiolinks")))
system.time(install.packages(c("mclust","clustvarsel","phenopath","vcd","rootSolve","cluster",
"factoextra","mltest","irlba","FNN","igraph","depmixS4","pheatmap",
"diagram","tidyverse","FactoMineR","dotwhisker","interactions",
"circlize","parallel","FSelector","nnet","gridExtra","reshape2",
"jtools","ggstance","broom.mixed","MASS","ggfortify","lme4","MuMIn",
"biglasso","doParallel","glmnetUtils","ROCR","MLeval","caret","ranger",
"fastshap","plotrix","data.table","VennDiagram","forcats","ggforce","gtools",
"ggpmisc","dplyr","grid","finalfit","knitr","kableExtra","survival","survminer","readxl",
"tidyr","glmnet","reshape","viridis","ggridges","cowplot","plyr","corrplot","data.table",
"rstatix","ggpubr","vcd","RColorBrewer","openxlsx","patchwork","ggplot2"),dependencies=T)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("DropletUtils","DESeq2",
"monocle","TSCAN","slingshot",
"ComplexHeatmap","GSVA","VennDetail",
"biomaRt","depmap","sva","TCGAbiolinks")))
system.time(install.packages(c("mclust","clustvarsel","phenopath","vcd","rootSolve","cluster",
"factoextra","mltest","irlba","FNN","igraph","depmixS4","pheatmap",
"diagram","tidyverse","FactoMineR","dotwhisker","interactions",
"circlize","parallel","FSelector","nnet","gridExtra","reshape2",
"jtools","ggstance","broom.mixed","MASS","ggfortify","lme4","MuMIn",
"biglasso","doParallel","glmnetUtils","ROCR","MLeval","caret","ranger",
"fastshap","plotrix","data.table","VennDiagram","forcats","ggforce","gtools",
"ggpmisc","dplyr","grid","finalfit","knitr","kableExtra","survival","survminer","readxl",
"tidyr","glmnet","reshape","viridis","ggridges","cowplot","plyr","corrplot","data.table",
"rstatix","ggpubr","vcd","RColorBrewer","openxlsx","patchwork","ggplot2"),dependencies=T)
if(!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
BiocManager::install(c("DropletUtils","DESeq2",
"monocle","TSCAN","slingshot",
"ComplexHeatmap","GSVA","VennDetail",
"biomaRt","depmap","sva","TCGAbiolinks")))
system.time(install.packages(c("mclust","clustvarsel","phenopath","vcd","rootSolve","cluster",
"factoextra","mltest","irlba","FNN","igraph","depmixS4","pheatmap",
"diagram","tidyverse","FactoMineR","dotwhisker","interactions",
"circlize","parallel","FSelector","nnet","gridExtra","reshape2",
"jtools","ggstance","broom.mixed","MASS","ggfortify","lme4","MuMIn",
"biglasso","doParallel","glmnetUtils","ROCR","MLeval","caret","ranger",
"fastshap","plotrix","data.table","VennDiagram","forcats","ggforce","gtools",
"ggpmisc","dplyr","grid","finalfit","knitr","kableExtra","survival","survminer","readxl",
"tidyr","glmnet","reshape","viridis","ggridges","cowplot","plyr","corrplot","data.table",
"rstatix","ggpubr","vcd","RColorBrewer","openxlsx","patchwork","ggplot2"),dependencies=T)
if(!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
BiocManager::install(c("DropletUtils","DESeq2",
"monocle","TSCAN","slingshot",
"ComplexHeatmap","GSVA","VennDetail",
"biomaRt","depmap","sva","TCGAbiolinks")))
system.time(install.packages(c("mclust","clustvarsel","phenopath","vcd","rootSolve","cluster",
"factoextra","mltest","irlba","FNN","igraph","depmixS4","pheatmap",
"diagram","tidyverse","FactoMineR","dotwhisker","interactions",
"circlize","parallel","FSelector","nnet","gridExtra","reshape2",
"jtools","ggstance","broom.mixed","MASS","ggfortify","lme4","MuMIn",
"biglasso","doParallel","glmnetUtils","ROCR","MLeval","caret","ranger",
"fastshap","plotrix","data.table","VennDiagram","forcats","ggforce","gtools",
"ggpmisc","dplyr","grid","finalfit","knitr","kableExtra","survival","survminer","readxl",
"tidyr","glmnet","reshape","viridis","ggridges","cowplot","plyr","corrplot","data.table",
"rstatix","ggpubr","vcd","RColorBrewer","openxlsx","patchwork","ggplot2"),dependencies=T))
10000/100
setwd("/Users/guidantonio/Desktop/GitHub/EMT/data")
cds.list <- readRDS("pseudospace_processed_trajectories_cds.list.rds")
str(cds.list)
library(monocle)
install.packages("monocle")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("monocle")
library(monocle)
cds.list <- readRDS("pseudospace_processed_trajectories_cds.list.rds")
str(cds.list)
mock <- Biobase::exprs(cds.list[["Mock"]])
tgfb <- Biobase::exprs(cds.list[["TGFB"]])
mock
mock_genes<-cds.list[["Mock"]]@featureData@data[,c(1,2)]
tgfb_genes<-cds.list[["TGFB"]]@featureData@data[,c(1,2)]
mock2<-data.frame(genes=mock_genes,as.matrix(mock))
tgfb2<-data.frame(genes=tgfb_genes,as.matrix(tgfb))
mock_pData <- pData(cds.list[["Mock"]])[,c("cell","sample","Pseudotime")]
tgfb_pData <- pData(cds.list[["TGFB"]])[,c("cell","sample","Pseudotime")]
str( mock_genes)
